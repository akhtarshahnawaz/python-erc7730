Analyze this Ethereum smart contract function and suggest appropriate ERC-7730 display formats for each parameter.

Function: %(function_name)s
State Mutability: %(state_mutability)s

Parameters:
%(parameters)s

%(userdoc_section)s

%(devdoc_section)s

%(source_section)s

%(constants_section)s

Based on the parameter names, types, documentation, source code context, and available constants, suggest:
1. The most appropriate ERC-7730 display format for each parameter
2. Better human-readable labels for parameters (if the current name is unclear)
3. A very short intent message for hardware wallet displays (max 5 words)

Analyze each parameter considering:
1. Parameter name semantics and meaning
2. Parameter type (address, uint256, string, bytes, etc.)
3. Function context, documentation, and source code implementation
4. Common smart contract patterns and the specific contract's behavior

Your goal is to make the transaction intent clearer to users.

Return ONLY a JSON object with this structure:
{
    "intent": "Very short action (max 5 words for hardware wallet displays)",
    "constants": {
        "constantName": "value"
    },
    "enums": {
        "enumName": {
            "1": "readable value",
            "2": "another value"
        }
    },
    "fields": {
        "parameterName": {
            "format": "FORMAT_NAME",
            "params": null | {...},
            "label": "Better Label (optional - only if current name is unclear)"
        }
    }
}

NOTES: 
- Only include "constants" section if you need to define constants referenced in field parameters
- Only include "enums" section if you need to define enums referenced in field parameters  
- Basic metadata (owner, info) is handled separately - don't include it

Example semantic analysis:
- "newOwner" (address) → addressName for account transfers, label: "New Contract Owner"
- "tokenAddress" (address) → addressName for token contracts, label: "Token Contract"
- "deadline" (uint256) → date with timestamp encoding, label: "Deadline"
- "tokenIds" (uint256[]) → raw for NFT token IDs (use raw unless collection address is available)
- "message" (string) → raw for arbitrary text
- "recipient" (address) → addressName for transfers, label: "Recipient"
- "amount" (uint256) with token parameter → tokenAmount if token address available

Example responses:
{
    "intent": "Transfer contract ownership",
    "fields": {
        "newOwner": {
            "format": "addressName",
            "params": {"types": ["eoa", "wallet", "contract"]},
            "label": "New Contract Owner"
        }
    }
}

{
    "intent": "Approve token spending",
    "fields": {
        "spender": {
            "format": "addressName", 
            "params": {"types": ["contract"]},
            "label": "Spender Contract"
        },
        "amount": {
            "format": "tokenAmount",
            "params": {"tokenPath": "@.to"},
            "label": "Amount to Approve"
        }
    }
}

{
    "intent": "Set trading deadline",
    "fields": {
        "deadline": {
            "format": "date",
            "params": {"encoding": "timestamp"},
            "label": "Trading Deadline"
        }
    }
}

{
    "intent": "Set interest rate mode",
    "enums": {
        "rateMode": {
            "1": "Stable Rate",
            "2": "Variable Rate"
        }
    },
    "fields": {
        "interestRateMode": {
            "format": "enum",
            "params": {"$ref": "$.enums.rateMode"},
            "label": "Rate Mode"
        }
    }
}

IMPORTANT:
- Intent messages must be very short (max 5 words) for hardware wallet displays
- Use action verbs: "Transfer", "Mint", "Update", "Approve", "Withdraw", "Deposit"
- Examples of good intents: "Transfer contract ownership", "Mint NFT", "Update mint price", "Approve token spend", "Withdraw funds"
- Do NOT hardcode any specific addresses or collection addresses
- Use semantic patterns, not contract-specific details
- Focus on parameter purpose, not specific contract implementation
- When uncertain, prefer "raw" format
- Only provide labels if they're clearer than the parameter name

Available formats: raw, amount, tokenAmount, nftName, addressName, calldata, date, duration, unit, enum

Remember: 
- Use lowercase format names
- tokenAmount and nftName require specific parameters or will fail
- When in doubt about required parameters, use "raw" format